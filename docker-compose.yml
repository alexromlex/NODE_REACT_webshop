# version: '3.9'

networks:
  network2022:
    driver: bridge

services:
  ####################################  METRICS START
  grafana:
    image: grafana/grafana
    container_name: grafana
    restart: unless-stopped
    environment:
      - GF_LOG_LEVEL=debug
    ports:
      - 3000:3000
    volumes:
      - ./grafana/grafana:/var/lib/grafana
      - ./grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards
    networks:
      - network2022

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    volumes:
      - ./prometheus:/etc/prometheus
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - 9090:9090
    networks:
      - network2022
  ####################################  METRICS END
  database:
    image: postgres:16
    container_name: webshop_db
    restart: always
    ports:
      - ${DB_PORT}:${DB_PORT}
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
    networks:
      - network2022
    volumes:
      - ./db:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 10s
      timeout: 5s
      retries: 5

  # PostgreSQL pgAdmin panel accessible at http://localhost:16543/
  # host will be a 'database' as service hame
  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: 'admin@mail.mail'
      PGADMIN_DEFAULT_PASSWORD: 'fakepassword123!'
    ports:
      - '16543:80'
    depends_on:
      - database
    networks:
      - network2022

  backend:
    image: alexromlex/webshop_backend:node18-slim-bookworm
    container_name: webshop_backend
    build:
      context: ./server
      dockerfile: Dockerfile
    restart: on-failure
    stdin_open: true
    tty: true
    networks:
      - network2022
    ports:
      - ${PORT}:${PORT}
    environment:
      - NODE_ENV=${NODE_ENV}
      - SECRET_KEY=${SECRET_KEY}
      - TOKEN_PREFIX=${TOKEN_PREFIX}
      - HOST=${HOST}
      - PORT=${PORT}
      - FRONTEND_PORT=${FRONTEND_PORT}
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_HOST=webshop_db
      - DB_PORT=${DB_PORT}
      - ADMIN_USER_EMAIL=${ADMIN_USER_EMAIL}
      - ADMIN_USER_PASS=${ADMIN_USER_PASS}
    depends_on:
      - database
    links:
      - database
    volumes:
      - '/home/appuser/code/node_modules/'
      - type: bind
        source: './server/'
        target: '/home/appuser/code/'
    command: ['npm', 'run', 'dev']

  frontend:
    image: alexromlex/webshop_frontend:node18-slim-bookworm
    container_name: webshop_frontend
    build:
      context: ./client
      dockerfile: Dockerfile
    restart: always
    stdin_open: true
    tty: true
    networks:
      - network2022
    environment:
      - VITE_SERVER_HOST=${HOST}
      - VITE_SERVER_PORT=${PORT}
    depends_on:
      - database
      - backend
    ports:
      - ${FRONTEND_PORT}:${FRONTEND_PORT}
    volumes:
      - '/home/appuser/code/node_modules/'
      - type: bind
        source: './client/'
        target: '/home/appuser/code/'
    command: ['npm', 'run', 'dev']
